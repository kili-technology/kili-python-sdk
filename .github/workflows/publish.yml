name: Release
on:
  release:
    types: [released]

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools twine wheel

      - name: Build
        run: |
          python setup.py sdist bdist_wheel

      - name: Test the Build
        run: |
          python -m pip install . # to install dependencies
          python -m pip uninstall -y kili
          python -m pip install --find-links=dist --no-index kili
          python -c 'from kili.client import Kili; k=Kili(); print("Everything OK!")'
        env:
          KILI_API_ENDPOINT: https://staging.cloud.kili-technology.com/api/label/v2/graphql
          KILI_API_KEY: ${{ secrets.KILI_USER_API_KEY_STAGING }}

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
          python -m twine upload dist/*

      - name: Slack notification
        id: slack
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Kili SDK ${{ github.ref_name }} released!\nGitHub: https://github.com/kili-technology/kili-python-sdk/releases\nPyPI: https://pypi.org/project/kili/",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Kili SDK ${{ github.ref_name }} released!\nGitHub: https://github.com/kili-technology/kili-python-sdk/releases\nPyPI: https://pypi.org/project/kili/"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PYTHON_SDK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Set git identity
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: create PR to merge release branch and master
        run: |
          git fetch --quiet

          # ${{ github.ref_name }}: The short ref name of the branch or tag that triggered the workflow run.
          git checkout ${{ github.ref_name }}

          source ./.github/scripts/utils.sh  # to load the function get_sdk_version_from_setup_cfg
          sdk_version=$(get_sdk_version_from_setup_cfg)

          # create a branch to merge the release branch and master
          git checkout -b merge_release/$sdk_version
          git push --set-upstream origin merge_release/$sdk_version
          gh pr create --title "chore: merge release/$sdk_version into master" --body "Merge release/$sdk_version into master" --base master
        env:
          GH_TOKEN: ${{ github.token }} # needed for gh cli

  deploy-documentation:
    uses: ./.github/workflows/deploy_doc.yml
    if: ${{ always() }} # Run even if the previous job fails
    needs: [publish] # Run after the previous job
    secrets:
      SLACK_WEBHOOK_URL_PYTHON_SDK: ${{ secrets.SLACK_WEBHOOK_URL_PYTHON_SDK }}
